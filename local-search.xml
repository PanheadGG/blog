<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>OJ-NOI-1.6-12 计算2的N次方 题解</title>
    <link href="/post/20241209OJNOI1d6-12/"/>
    <url>/post/20241209OJNOI1d6-12/</url>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="12-计算2的N次方"><a href="#12-计算2的N次方" class="headerlink" title="12:计算2的N次方"></a><strong>12:计算2的N次方</strong></h2><p>总时间限制: 1000ms 内存限制: 65536kB</p><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a><strong>描述</strong></h3><p>任意给定一个正整数N(N&lt;&#x3D;100)，计算2的N次方的值。</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a><strong>输入</strong></h3><p>输入一个正整数N。</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a><strong>输出</strong></h3><p>输出2的N次方的值。</p><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a><strong>样例输入</strong></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">5<br></code></pre></td></tr></table></figure><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a><strong>样例输出</strong></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">32<br></code></pre></td></tr></table></figure><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a><strong>提示</strong></h3><p>高精度计算</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>题目结果限制为$2^{100}  ≈ 1.26765 × 10^{30}$，很明显即使使用<code>unsigned long long</code>数据类型也无法表示这么大的数。<br>我们可以将结果进行拆分，存储至数组，最后遍历数组即可。<br>因此我们可以将每位上的数存储到数组中，每乘以一次2，就对数组上每一个元素进行进位处理。<br>则函数原型(C++版)为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">multiply</span><span class="hljs-params">(<span class="hljs-type">int</span> num[],<span class="hljs-type">int</span> &amp;len)</span></span>&#123;    <span class="hljs-comment">//len为当前所表达的数的位数</span><br>    <span class="hljs-type">int</span> bit = <span class="hljs-number">0</span>;    <span class="hljs-comment">//bit表示要进位时所加的数</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>        <span class="hljs-type">int</span> tmp = num[i] * <span class="hljs-number">2</span> + bit;<br>        num[i] = tmp % <span class="hljs-number">10</span>;    <span class="hljs-comment">//当前位数取个位存储</span><br>        bit = tmp/<span class="hljs-number">10</span>;    <span class="hljs-comment">//将要进位的数存储至bit中</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(bit&gt;<span class="hljs-number">0</span>)&#123;<br>        num[len] += bit;    <span class="hljs-comment">//如果最后一次循环bit大于0，则最高位前加上bit</span><br>        len++;    <span class="hljs-comment">//位数加1</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个函数中，<code>len</code>表示这个数现在的位数，然后对数组每个数乘以2，取个位，将进位时所加的数存储到<code>bit</code>中，在下一位数乘以2后加上<code>bit</code>，以此类推。<br>在最后一个循环后，如果进位数<code>bit</code>大于0，就在最高位前加上要进的位，并<code>len</code>自增。<br>在main函数中只需根据输入确定循环次数调用此函数，最后从后往前遍历数组。</p><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><h3 id="C-版本："><a href="#C-版本：" class="headerlink" title="C++版本："></a>C++版本：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> arr[<span class="hljs-number">100</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">multiply</span><span class="hljs-params">(<span class="hljs-type">int</span> num[],<span class="hljs-type">int</span> &amp;len)</span></span>&#123;<br>    <span class="hljs-type">int</span> bit = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>        <span class="hljs-type">int</span> tmp = num[i] * <span class="hljs-number">2</span> + bit;<br>        num[i] = tmp % <span class="hljs-number">10</span>;<br>        bit = tmp/<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(bit&gt;<span class="hljs-number">0</span>)&#123;<br>        num[len] += bit;<br>        len++;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    arr[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> len = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-built_in">multiply</span>(arr,len);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=len<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--) cout&lt;&lt;arr[i];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="C版本："><a href="#C版本：" class="headerlink" title="C版本："></a>C版本：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> arr[<span class="hljs-number">100</span>];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">multiply</span><span class="hljs-params">(<span class="hljs-type">int</span> num[],<span class="hljs-type">int</span> *len)</span>&#123;<br>    <span class="hljs-type">int</span> bit = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;*len;i++)&#123;<br>        <span class="hljs-type">int</span> tmp = num[i] * <span class="hljs-number">2</span> + bit;<br>        num[i] = tmp % <span class="hljs-number">10</span>;<br>        bit = tmp/<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(bit&gt;<span class="hljs-number">0</span>)&#123;<br>        num[*len] += bit;<br>        (*len)++;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    arr[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> len = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        multiply(arr,&amp;len);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=len<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,arr[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="思考与拓展"><a href="#思考与拓展" class="headerlink" title="思考与拓展"></a>思考与拓展</h1><p>理论上使用这种方法可以计算2的N次方（N为数组容量所能接受的最大整数），但时间复杂度为$O(n^2)$。<br>也可以进行拓展计算其他数的N次方，但需要注意进位的逻辑。</p>]]></content>
    
    
    
    <tags>
      
      <tag>OJ</tag>
      
      <tag>C++</tag>
      
      <tag>C</tag>
      
      <tag>NOI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Github Pages和Gridea免费搭建个人博客</title>
    <link href="/post/20241114/"/>
    <url>/post/20241114/</url>
    
    <content type="html"><![CDATA[<h3 id="注册Github账号"><a href="#注册Github账号" class="headerlink" title="注册Github账号"></a>注册Github账号</h3><p>注册方法较简单，此处不作赘述，具体请参考<a href="https://blog.csdn.net/m0_67906358/article/details/128808210">这篇文章（点击跳转）</a>。</p><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>注册完后进入仓库页面<code>Repositories</code>，点击绿色按钮<code>New</code>。<br><code>Repository name</code>里填写<code>你的用户名.github.io</code>。<br>例如：我的用户名是PanheadGG，那么我就要填<code>panheadgg.github.io</code>。<br>隐私权限处要选择<code>Public</code>，否则别人无法访问你的网站，勾上<code>Add a README file</code>。<br>其他保持默认，点击绿色按钮<code>Create repository</code>。</p><p>创建成功后在菜单栏中点击<code>Settings</code>，左侧选择<code>Pages</code>，然后选择使用<code>main</code>分支，点击<code>Save</code>保存。</p><h3 id="获取Github令牌"><a href="#获取Github令牌" class="headerlink" title="获取Github令牌"></a>获取Github令牌</h3><p>鼠标移到头像，在弹出的窗口中点击<code>Settings</code>。<br>在左边选择<code>Develop Settings</code>，点击<code>Personal access tokens</code>，点击<code>Tokens (classic)</code>。<br>右侧点击<code>Generate new token</code>，点击<code>Generate new token (classic)</code>。<br><code>Note</code>进行备注，<code>Expiration</code>选择到期时间，点击<code>Generate token</code>创建token。<br>Token创建后复制保存备用。</p><h3 id="下载并安装Gridea博客软件"><a href="#下载并安装Gridea博客软件" class="headerlink" title="下载并安装Gridea博客软件"></a>下载并安装Gridea博客软件</h3><p>Gridea分为付费版和免费版，个人推荐免费版.</p><p><a href="https://open.gridea.dev/">官网地址 (https://open.gridea.dev/)</a>。<br><a href="https://github.com/getgridea/gridea/releases">程序下载地址(https://github.com/getgridea/gridea/releases)</a>。<br>根据系统自行选择版本下载。<br>下载完后进行正常安装即可。</p><p>安装完成后先修改站点文件到方便查找管理的地方。<br>点击左下角设置图标，更改站点源文件路径。更改完记得点击保存！</p><p>然后回到主页面点击<code>远程</code>，按要求填写。</p><ul><li>域名：https:&#x2F;&#x2F;你的用户名.github.io</li><li>仓库：你的用户名.github.io</li><li>分支：main</li><li>用户名：你的 GitHub 账号的昵称</li><li>邮箱：你的 GitHub 账号的邮箱</li><li>Token: 即刚刚创建的Token</li><li>CNAME: 可通过这个选项配置你自己的域名（可不填，本文不作描述）</li></ul><p>点击<code>检测远程连接</code>，若所有信息都正确，关闭加速器和代理再试试。<br>若连接成功即可点击<code>同步</code>按钮即可发布在github上，同步之前可以点击预览查看效果。<br>此外，你还可以通过 Gridea 来设置网站主题，网站名称，网站描述等。（具体方法本文不作描述）<br>等待几分钟你的网站就配置好，进入<code>https://你的用户名.github.io</code>查看。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>Github的服务器位于美国，会存在网络卡顿的情况，且网速较慢，文章中尽量包含较少的图片。<br>Github的仓库容量为1G，超过容量后将无法上传。</p>]]></content>
    
    
    
    <tags>
      
      <tag>建站</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
